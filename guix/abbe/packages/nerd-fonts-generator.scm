(define-module (abbe packages nerd-fonts-generator)
  #:use-module (guix download)
  #:use-module (guix packages)
  #:use-module (guix build-system font)
  #:use-module (guix build-system trivial)
  #:use-module ((guix licenses) #:prefix licenses:)
  #:use-module (guix hash)
  #:use-module (guix base16)
  #:use-module (guix base32)
  #:use-module (guix gexp)
  #:use-module (guix derivations)
  #:use-module (guix store)
  #:use-module (gnu packages compression)
  #:use-module (rnrs)
  #:use-module (ice-9 match)
  #:export (generate-nerd-fonts))

(define nerd-fonts-url "https://github.com/ryanoasis/nerd-fonts/releases/download/")
(define nerd-fonts-ver "3.2.1")
(define (nerd-fonts-url-for name)
  (format #f "~a/v~a/~a.tar.xz"
          nerd-fonts-url nerd-fonts-ver name))
(define nerd-fonts-sha256-url
  (format #f "~a/v~a/SHA-256.txt" nerd-fonts-url nerd-fonts-ver))

(define fake-hash (make-string 52 #\0))

(define sha256-txt
  (origin
   (method url-fetch)
   (uri nerd-fonts-sha256-url)
   (sha256 (base32 "1k9q9skirqmrla2c751k21pfrsj260f39npnn33r96rbi2nv5bbc"))))

(define (gen-nerd-font-package pkg-name sha256-hash)
  (package
   (name (string-append "font-nerd-font-" (string-downcase pkg-name)))
   (version nerd-fonts-ver)
   (source (origin
            (method url-fetch)
            (uri (nerd-fonts-url-for pkg-name))
            (sha256 (base16-string->bytevector sha256-hash))))
   (build-system font-build-system)
   (home-page "https://www.nerdfonts.com/")

   (synopsis "Iconic font aggregator, collection, & patcher. 3,600+ icons,
50+ patched fonts: Hack, Source Code Pro, more. Glyph collections: Font
Awesome, Material Design Icons, Octicons, & more")

   (description "Nerd Fonts is a project that patches developer targeted
fonts with a high number of glyphs (icons). Specifically to add a high number
of extra glyphs from popular 'iconic fonts' such as Font Awesome, Devicons,
Octicons, and others.")

   (license licenses:expat)))

(define* (sha256-lines in #:optional (lines '()))
  (let ([line (get-line in)])
    (if (eof-object? line)
        (reverse lines)
        (sha256-lines in (cons line lines)))))

(define (pkg-hash line)
  (match (string-split line #\Space)
    ((hash "" file-name)
     (cons (car (string-split file-name #\.)) hash))))

(define (generate-fonts hash-file-name)

  (let ((lines (filter (lambda (h) (string-suffix? ".tar.xz" h))
                       (call-with-input-file hash-file-name sha256-lines))))
    (map (lambda (pkg-hash)
           (let ((pkg (gen-nerd-font-package
                       (car pkg-hash) (cdr pkg-hash))))
             (cons (package-name pkg)
                   pkg)))
         (map pkg-hash lines))))

(define (generate-nerd-fonts out-file)
  (define sha256-txt-out
    (let* ((store (open-connection))
           (drv (run-with-store store (origin->derivation sha256-txt)))
           (output (derivation->output-path drv)))
      (build-derivations store (list drv))
      output))
  (call-with-output-file 
      out-file
    (lambda (out)
      (display (string-join '(";; auto-generated by nerd-fonts-gnerator.scm"
                              "(define-module (abbe packages nerd-fonts)"
                              "  #:use-module (guix packages)"
                              "  #:use-module (guix hash)"
                              "  #:use-module (guix download)"
                              "  #:use-module (guix build-system font)"
                              "  #:use-module ((guix licenses) #:prefix licenses:))")
                            "\n") out)

      (for-each (lambda (pkg)
                  (let* ([p (cdr pkg)]
                         [o (package-source p)]
                         [h (origin-hash o)])
                    (newline out)
                    (format out "\n(define-public ~a\n\t(package\n" (car pkg))
                    (format out "\t\t(name ~s)\n" (package-name p))
                    (format out "\t\t(version ~s)\n" (package-version p))
                    (format out "\t\t(source (origin (method url-fetch) (uri ~s) (~a (base32 ~s))))\n"
                            (origin-uri o)
                            (content-hash-algorithm h)
                            (bytevector->nix-base32-string (content-hash-value h)))
                    (display "\t\t(build-system font-build-system)\n" out)
                    (display "\t\t(license licenses:expat)\n" out)
                    (format out "\t\t(home-page ~s)\n" (package-home-page p))
                    (format out "\t\t(synopsis ~s)\n" (package-synopsis p))
                    (format out "\t\t(description ~s)))\n" (package-description p))))
                (generate-fonts sha256-txt-out)))))
